<?php

/**
 * UserTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserTable extends Doctrine_Table
{

    const PER_PAGE = 100;
    const USER_NORMAL = 1;
    const USER_FACEBOOK = 2;
    const VERIFY = 1;

    /**
     * Returns an instance of this class.
     *
     * @return object UserTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('User');
    }

    public static function getListSearch($username, $lastname, $firstname, $mobile, $pointFrom, $pointTo, $isVerify, $isAdmin, $status, $page, $createdAtFrom, $createdAtTo, $updatedAtFrom, $updatedAtTo)
    {
        $query = self::getInstance()
                ->createQuery()
                ->where('id != 0');

        if ($username) {
            $query->andWhere("username LIKE '$username'");
        }
        if ($lastname) {
            $query->andWhere("lastname LIKE '$lastname'");
        }
        if ($firstname) {
            $query->andWhere("firstname LIKE '$firstname'");
        }
        if ($mobile) {
            $query->andWhere("mobile LIKE '$mobile%'");
        }
        if (strlen($pointFrom) > 0) {
            $query->andWhere("total_point >= $pointFrom");
        }
        if (strlen($pointTo) > 0) {
            $query->andWhere("pointTo <= $pointTo");
        }
        if (strlen($isVerify) > 0) {
            $query->andWhere("is_verify = $isVerify");
        }
        if (strlen($isAdmin) > 0) {
            $query->andWhere("is_system_admin = $isAdmin");
        }
        if (strlen($status) > 0) {
            $query->andWhere("status = $status");
        }
        if ($createdAtFrom) {
            $query->andWhere('created_at >= ?', $createdAtFrom . ' 00:00:00');
        }
        if ($createdAtTo) {
            $query->andWhere('created_at <= ?', $createdAtTo . ' 23:59:59');
        }
        if ($updatedAtFrom) {
            $query->andWhere('updated_at >= ?', $updatedAtFrom . ' 00:00:00');
        }
        if ($updatedAtTo) {
            $query->andWhere('updated_at <= ?', $updatedAtTo . ' 23:59:59');
        }

        $pager = new sfDoctrinePager('User', self::PER_PAGE);
        $pager->setQuery($query);
        $pager->setPage($page);
        $pager->init();

        return $pager;
    }

    public static function updateTotalPoint($userId)
    {
        $sql = "UPDATE user SET total_point = (SELECT SUM(point) FROM user_account WHERE user_id = $userId) WHERE id = $userId";

        $pdo = AppEntity::getConnection();
        $pdo->query($sql)->execute();
    }

    public static function getObjBy($username)
    {
        return self::getInstance()
                        ->createQuery('a')
                        ->where('a.username = ?', $username)
                        ->andWhere('is_verify = 1')
                        ->andWhere('is_system_admin = 1')
                        ->limit(1)
                        ->fetchOne();
    }

    public static function getUserBy($username)
    {
        return self::getInstance()
                        ->createQuery('a')
                        ->where('a.email = ?', $username)
                        ->andWhere('is_verify = 1')
                        ->andWhere('is_system_admin = 2')
                        ->limit(1)
                        ->fetchOne();
    }

    public static function getFullname($id)
    {
        $obj = self::getInstance()
                ->createQuery('a')
                ->where('a.id = ?', $id)
                ->limit(1)
                ->fetchOne();

        return $obj ? $obj->getUsername() : '';
    }

    public static function getList($username, $orgId, $page)
    {
        $query = self::getInstance()
                ->createQuery()
                ->where('status = 1');

        if ($username) {
            $query->andWhere("username LIKE '%" . $username . "%'");
        }
        if ($orgId) {
            $query->andWhere('organization_id = ' . $orgId);
        }

        $pager = new sfDoctrinePager('User', self::PER_PAGE);
        $pager->setQuery($query);
        $pager->setPage($page);
        $pager->init();

        return $pager;
    }

    public static function checkUnique($username)
    {
        $cnt = self::getInstance()
                ->createQuery()
                ->where('username = ?', $username)
                ->count();

        return $cnt > 0;
    }

    public static function checkExistsPosition($positionId)
    {
        $cnt = self::getInstance()
                ->createQuery()
                ->where('position_id = ?', $positionId)
                ->count();

        return $cnt > 0;
    }

    public static function getBirthdayList()
    {
        $date = date("-m-d");
        $margash = date("-m-d", mktime(0, 0, 0, date("m"), date("d") + 1, date("Y")));
        $nogodor = date("-m-d", mktime(0, 0, 0, date("m"), date("d") + 2, date("Y")));

        $additional = "";
        $field = "a.birthday";
        $order = "a.birthday";

        $whereStatement = $field . " LIKE '%" . $date . "'" . $additional;

        if (date("N") == 5) {
            $whereStatement = "(" . $field . " LIKE '%" . $date . "' OR " . $field . " LIKE '%" . $margash . "' OR " . $field . " LIKE '%" . $nogodor . "%')";
        }

        $sql = 'SELECT a.*
                FROM ' . HrmCore::table_user . ' AS a
                WHERE a.status IN (1, 2) AND ' . $whereStatement . '
                ORDER BY ' . $order;

        return HrmCore::getInstance()->fetchAll($sql);
    }

    public static function getUserIdBy($username)
    {
        $obj = self::getInstance()
                ->createQuery()
                ->where('username = ?', $username)
                ->limit(1)
                ->fetchOne();

        if ($obj) {
            return $obj->getId();
        }

        return 0;
    }

    public static function doDeactivate()
    {
        $userId = (int) sfContext::getInstance()->getUser()->getId();
        $user = UserTable::getInstance()->findOneBy('id', $userId);
        $email = $user->getEmail();

        $sql = 'INSERT INTO user_deleted(email, username, `password`, lastname, firstname, mobile, total_point, used_point, is_verify, is_system_admin, `status`, last_login, updated_at, created_at)
                SELECT email, username, `password`, lastname, firstname, mobile, total_point, used_point, is_verify, is_system_admin, `status`, last_login, updated_at, created_at
                FROM `user`
                WHERE id = ' . $userId;

        $pdo = AppEntity::getConnection();
        $stmt = $pdo->prepare($sql);
        $stmt->execute();

        $sql = 'DELETE FROM `user` WHERE id = ' . $userId;

        $pdo = AppEntity::getConnection();
        $stmt = $pdo->prepare($sql);
        $stmt->execute();

        UserTmpTable::changeStatus($email);
    }

    public static function getTotalPoint($userId)
    {
        $obj = self::getInstance()->findOneBy('id', $userId);

        if (!$obj) {
            return 0;
        }

        return $obj->getTotalPoint();
    }

    public static function getUsedPoint($userId)
    {
        $obj = self::getInstance()->findOneBy('id', $userId);

        if (!$obj) {
            return 0;
        }

        return $obj->getUsedPoint();
    }

    /**
     * Хэрэглэгчийн үлдэгдэл онооноос хасалт хийе
     * 
     * @param type $userId
     * @param type $totalPoint
     * @param type $point
     */
    public static function subtractionPoint($userId, $totalPoint, $point)
    {
        Doctrine_Query::create()
                ->update('User a')
                ->set('a.total_point', $totalPoint - $point)
                ->where('a.id = ?', $userId)
                ->execute();
    }

    /**
     * Хэрэглэсэн оноог нэмэе
     * Оноогоор худалдан авалт хийх
     * 
     * @param type $userId
     * @param type $point
     */
    public static function addUsedPoint($userId, $point)
    {
        $query = 'UPDATE `user` SET used_point = used_point + ' . $point . ' WHERE id = ' . $userId;

        $pdo = AppEntity::getConnection();
        $pdo->query($query);
    }

    /**
     * Үлдэгдэл оноог нэмэх
     * Админ татгалзсан тохиолдолд - хассан оноог буцаан нэмэх
     * 
     * @param type $userId
     * @param type $point
     */
    public static function addPoint($userId, $point)
    {
        $query = 'UPDATE `user` SET total_point = total_point + ' . $point . ' WHERE id = ' . $userId;

        $pdo = AppEntity::getConnection();
        $pdo->query($query);
    }

    /**
     * Хэрэглэсэн оноог буцаах
     * Админ татгалзсан тохиолдолд - хэрэглэсэн оноог буцаан хасах
     * 
     * @param type $userId
     * @param type $point
     */
    public static function subtractionUsedPoint($userId, $point)
    {
        $query = 'UPDATE `user` SET used_point = used_point - ' . $point . ' WHERE id = ' . $userId;

        $pdo = AppEntity::getConnection();
        $pdo->query($query);
    }

    /**
     * Шинээр бүртгэгдсэн хэрэглэгчдийн тоог авъя
     */
    public static function getNewUserCnt()
    {
        $cnt = self::getInstance()
                ->createQuery()
                ->where('created_at >= ?', date('Y-m-d') . ' 00:00:00')
                ->andWhere('created_at <= ?', date('Y-m-d') . ' 23:59:59')
                ->count();

        return $cnt;
    }

    /**
     * Бүртгэлээ зассан хэрэглэгчдийн тоог аяъя
     */
    public static function getEditedUserCnt()
    {
        $cnt = self::getInstance()
                ->createQuery()
                ->where('updated_at >= ?', date('Y-m-d') . ' 00:00:00')
                ->andWhere('updated_at <= ?', date('Y-m-d') . ' 23:59:59')
                ->count();

        return $cnt;
    }

    /**
     * Шинэ судалгааны мэдээлэл авах хэрэглэгчдийн жагсаалт
     * 
     * @return type
     */
    public static function getReceiveSurvey()
    {
        $sql = 'SELECT u.id, u.email
                FROM user AS u
                INNER JOIN user_extra AS e ON e.id = u.id
                WHERE e.is_receive_survey = 1 AND u.email IS NOT NULL';

        $pdo = AppEntity::getConnection();
        $rows = $pdo->query($sql)->fetchAll(PDO::FETCH_ASSOC);

        return $rows;
    }

}
